"use client";
import { PostAction } from "@/actions/students/PostAction";
import { Button } from "@/components/ui/button";
import { orderPostGetall } from "@/constans";
import { globalContext } from "@/contextApi/ContextApi";
import Spinner from "@/utilities/Spinner";
import React, { useContext, useEffect, useState } from "react";
import {
    Dialog,
    DialogContent,
    DialogHeader,
    DialogTitle,
} from "@/components/ui/dialog";
import {
    Select,
    SelectContent,
    SelectGroup,
    SelectItem,
    SelectLabel,
    SelectTrigger,
    SelectValue,
} from "@/components/ui/select"
import { DialogTrigger } from "@radix-ui/react-dialog";
import { getMyAllProfile } from "@/handlers/profile";
import { ArrowDown } from "lucide-react";
import Link from "next/link";
import { useRouter } from "next/navigation";

export default function NewApplyButton() {
    const router = useRouter();
    const { showToast, studentIsLogin: loginStatus, setTotalAmount , servicesData , setOrderDataForPayment  } = useContext(globalContext);
    const [open, setOpen] = useState(false);
    const [waiting, setWaiting] = useState(false);
    const [formData, setFormData] = useState({
        // isOthersStudent: false,
        profile: null
    })


    const [profileList, setProfileList] = useState([]);
    const [selectedDepartment, setSelectedDepartment] = useState(null);
    const [finalTotalFee, setFinalTotalFee] = useState(0);


    //  profile dropdown change
    const handleProfileChange = (profile) => {

        setFormData((prev) => ({
            ...prev,
            profile: profile
        }))
    }


    const handleSelectDepartment = (value) => {
        setSelectedDepartment(value);
        const imporoveSub = formData.profile && formData.profile.improvementSubjects?.length || 0;
        const imporveFeeCount = Number(imporoveSub) * Number(value.subjectFee || 0);
        const totalFee = imporveFeeCount + Number(value.chargeFee || 0) + Number(value.collegeFee || 0)
        setFinalTotalFee(totalFee);
        setTotalAmount(totalFee)
    }


    useEffect(() => {
        const getMyProfileList = async () => {
            try {
                const { status, data } = await getMyAllProfile();

                if (status === 200) {
                    setProfileList(data)
                }

            } catch (error) {
                console.log(error)
            }
        };
        getMyProfileList()
    }, [])


    const handleProceedToPayment = () => {
        // ‡ßß. ‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶°‡ßá‡¶∂‡¶®
        if (!selectedDepartment) {
            showToast("error", "‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§");
            return;
        }
        if (!formData.profile?._id) {
            showToast("error", "‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§");
            return;
        }

        // ‡ß®. ‡¶∏‡¶ï‡¶≤ ‡¶°‡ßá‡¶ü‡¶æ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡ßá ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡¶æ
        const orderData = {
            serviceId: serviceData._id,
            department: selectedDepartment.department,
            collegeFee: selectedDepartment.collegeFee,
            subjectFee: selectedDepartment.subjectFee,
            chargeFee: selectedDepartment.chargeFee,
            totalFee: finalTotalFee,
            profileId: formData.profile._id,
            // ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡ßá‡¶ü‡¶æ ‡¶¨‡¶æ ‡¶°‡¶ø‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶°‡ßá‡¶ü‡¶æ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®
            selectedDepartmentDetails: selectedDepartment,
            selectedProfileDetails: formData.profile
        };

        // ‡ß©. Context-‡¶è ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ
        setOrderDataForPayment(orderData); // üö® ‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø Context-‡¶è ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶π‡¶¨‡ßá

        // ‡ß™. ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶™‡ßá‡¶ú‡ßá ‡¶∞‡¶ø‡¶°‡¶æ‡¶á‡¶∞‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ
        router.push("/profile/payment");
    };
    // --- `handleProceedToPayment` ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶∏‡¶Æ‡¶æ‡¶™‡ßç‡¶§ ---





    // const handleSubmit = async () => {
    //     if (!selectedDepartment) {
    //         showToast("error", "‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§");
    //         return;
    //     }

    //     setWaiting(true);

    //     try {
    //         const payload = {
    //             method: "POST",
    //             endpoint: orderPostGetall,
    //             body: {
    //                 serviceId: serviceData._id,
    //                 department: selectedDepartment.department,
    //                 collegeFee: selectedDepartment.collegeFee,
    //                 subjectFee: selectedDepartment.subjectFee,
    //                 chargeFee: selectedDepartment.chargeFee,
    //                 totalFee: finalTotalFee,
    //                 // isOthersStudent: formData.isOthersStudent,
    //                 profileId: formData.profile._id
    //             },
    //         };

    //         const { status, data } = await PostAction(payload);
    //         showToast(status, data);
    //         setOpen(false);
    //         // setSelectedDepartment(null); // Reset after submit
    //     } catch (error) {
    //         console.log(error);
    //     } finally {
    //         setWaiting(false);
    //     }
    // };


    return (
        <Dialog open={open} onOpenChange={(val) => {
            setOpen(val);
            if (!val) setSelectedDepartment(null); // Reset when modal closes
        }}
        >
            {/* <DialogTrigger asChild>
                <Button
                    onClick={(e) => {
                        if (!loginStatus) {
                            e.preventDefault(); // modal open ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßá ‡¶¶‡¶ø‡¶¨‡ßá
                            showToast(401, "‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶ó‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®");
                            return;
                        }
                        setOpen(true);
                    }}
                    className="min-w-[130px] mt-4 bg-blue-600 text-white text-sm font-semibold rounded hover:bg-blue-700 transition cursor-pointer"
                >
                    ‡¶Ü‡¶¨‡ßá‡¶¶‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
                </Button>
            </DialogTrigger> */}

            <DialogContent className="w-[90vw] max-w-3xl h-[80vh] overflow-y-auto"
                onInteractOutside={(event) => {
                    event.preventDefault(); // ‡¶¨‡¶æ‡¶á‡¶∞‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡¶≤‡ßá modal ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶¨‡ßá ‡¶®‡¶æ
                }}

            >
                <DialogHeader>
                    <DialogTitle>‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</DialogTitle>
                </DialogHeader>


                <div className=" my-4">
                    <SelectGroup>
                        <SelectLabel>
                            ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
                        </SelectLabel>
                        <Select

                            onValueChange={handleProfileChange}
                        >
                            <SelectTrigger className="w-full">
                                <SelectValue placeholder="‡¶è‡¶ñ‡¶æ‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶¨‡¶æ‡¶õ‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®" />
                            </SelectTrigger>
                            <SelectContent>
                                <SelectLabel>
                                    {
                                        profileList && profileList?.length > 0 ?
                                            "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ"
                                            :
                                            " ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶®‡ßã ‡¶ï‡ßã‡¶® ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡¶®‡¶®‡¶ø  "
                                    }
                                </SelectLabel>
                                {
                                    profileList && profileList.map((profile) => (
                                        <SelectItem
                                            key={profile._id} value={profile}>
                                            {profile.studentName || "N/A"}
                                        </SelectItem>
                                    ))

                                }
                            </SelectContent>
                        </Select>

                    </SelectGroup>
                </div>


                <div className=" mb-3 rounded-md w-full border border-green-400 bg-green-100 text-green-900 p-3 ">
                    {
                        formData.profile?._id ?
                            <div className=" text-[12px]">
                                <p>‡¶®‡¶æ‡¶Æ: {formData.profile?.studentName}</p>
                                <p>‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó: {formData.profile?.department}</p>
                                {formData.profile.improvementSubjects.length > 0 && <p> ‡¶á‡¶Æ‡ßç‡¶™‡ßç‡¶∞‡ßÅ‡¶≠ ‡¶Ü‡¶õ‡ßá‡¶É {formData.profile.improvementSubjects?.length} -‡¶ü‡¶ø</p>}
                            </div>
                            :
                            <p className=" text-[12px]">
                                ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡¶≤‡ßá ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶®‡¶æ‡¶Æ ‡¶ì ‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá , ‡¶∏‡ßá ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡¶æ‡¶õ‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®
                            </p>

                    }
                </div>

                <div className="space-y-4">
                    {selectedDepartment ? (
                        <div
                            className={`border p-3 rounded  ${selectedDepartment.department === formData?.profile?.department
                                ? "bg-green-100 border-green-500"
                                : "bg-red-100 border-red-500"
                                }`}

                        >
                            <div className="flex items-center justify-between flex-wrap">
                                <p className="font-medium">{selectedDepartment.department}</p>
                                <p
                                    className={`text-sm underline ${selectedDepartment.department === formData?.profile?.department
                                        ? "text-green-600"
                                        : "text-red-600"
                                        }`}
                                >
                                    {selectedDepartment.department === formData?.profile?.department
                                        ? "‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó"
                                        : "‚ö† ‡¶è‡¶ü‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó ‡¶®‡ßü"}
                                </p>
                            </div>

                            <p className="text-sm text-gray-600">
                                ‡¶ï‡¶≤‡ßá‡¶ú ‡¶´‡¶ø: {selectedDepartment.collegeFee}‡ß≥
                            </p>
                            <p className="text-sm text-gray-600">
                                ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶∏‡¶æ‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶´‡¶ø: {selectedDepartment.subjectFee}‡ß≥
                            </p>
                            <p className="text-sm text-gray-600">
                                ‡¶ö‡¶æ‡¶∞‡ßç‡¶ú ‡¶´‡¶ø: {selectedDepartment.chargeFee}‡ß≥
                            </p>
                            <p className="text-sm text-gray-600">‡¶Æ‡ßã‡¶ü ‡¶´‡¶ø: {finalTotalFee}‡ß≥</p>


                            <div className="text-xs text-blue-600 mt-1 flex items-center gap-1">
                                {selectedDepartment.department === formData?.profile?.department ? (
                                    <p>
                                        <ArrowDown size={14} className="inline-block" />
                                        ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
                                    </p>
                                ) : (
                                    <p
                                        className="cursor-pointer"
                                        onClick={() => setSelectedDepartment(null)}>
                                        "‚Üê ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®"
                                    </p>
                                )}
                            </div>
                        </div>
                    ) : (
                        serviceData.departmentFees?.map((dept, i) => {
                            const isSelected = formData?.profile?.department === dept.department;
                            const selectStyle =
                                "border border-green-400 bg-green-100 text-green-900";
                            const selectText = "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó";

                            return (
                                <div
                                    key={i}
                                    onClick={() => handleSelectDepartment(dept)}
                                    className={`border p-3 rounded cursor-pointer hover:border-blue-400 ${isSelected ? selectStyle : ""
                                        } `}
                                >
                                    <div className="flex items-center justify-between flex-wrap">
                                        <p className="font-medium">{dept.department}</p>
                                        <p className="text-sm underline">{isSelected && selectText}</p>
                                    </div>
                                    <p className="text-sm text-gray-600">
                                        ‡¶ï‡¶≤‡ßá‡¶ú ‡¶´‡¶ø: {dept.collegeFee}‡ß≥
                                    </p>
                                    <p className="text-sm text-gray-600">
                                        ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶∏‡¶æ‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶´‡¶ø: {dept.subjectFee}‡ß≥
                                    </p>
                                    <p className="text-sm text-gray-600">
                                        ‡¶ö‡¶æ‡¶∞‡ßç‡¶ú ‡¶´‡¶ø: {dept.chargeFee}‡ß≥
                                    </p>
                                    <p className="text-sm text-gray-600">
                                        ‡¶Æ‡ßã‡¶ü ‡¶´‡¶ø: {dept.totalFee}‡ß≥
                                    </p>
                                </div>
                            );
                        })
                    )}
                </div>




                {
                    selectedDepartment && formData.profile?._id && selectedDepartment?.department === formData?.profile?.department &&
                    
                    <Button
                        onClick={handleProceedToPayment} // üö® ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
                        className="w-full mt-4 bg-green-600 hover:bg-green-700 text-white cursor-pointer"
                        disabled={!formData.profile?._id}
                    >
                        ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶ß‡¶æ‡¶™‡ßá ‡¶Ø‡¶æ‡¶®
                    </Button>

                }
            </DialogContent>
        </Dialog>
    );
}
