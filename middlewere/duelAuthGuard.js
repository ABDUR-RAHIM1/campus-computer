// utils/authGuard.js
import jwt from "jsonwebtoken";
import { JWT_SECRET } from "@/constans";
import { NextResponse } from "next/server";

export const duelAuthGuard = async (req) => {
  try {
    const authHeader = req.headers.get("authorization");

    // üîí Authorization ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø Block
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      return {
        error: true,
        access: false,
        response: NextResponse.json(
          { message: "‡¶Ö‡¶®‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß!" },
          { status: 401 }
        ),
      };
    }

    // üîë ‡¶ü‡ßã‡¶ï‡ßá‡¶® verify
    const token = authHeader.split(" ")[1];
    const decoded = jwt.verify(token, JWT_SECRET);

    // ‡¶Ø‡¶¶‡¶ø ‡¶ü‡ßã‡¶ï‡ßá‡¶®‡¶á invalid ‡¶π‡ßü
    if (!decoded) {
      return {
        error: true,
        access: false,
        response: NextResponse.json(
          { message: "‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡ßü ‡¶¨‡¶æ ‡¶Æ‡ßá‡ßü‡¶æ‡¶¶ ‡¶∂‡ßá‡¶∑!" },
          { status: 403 }
        ),
      };
    }

    // üîé Role check
    const role = decoded?.role;

    // ‚úÖ ‡¶Ø‡¶¶‡¶ø admin ‡¶π‡ßü ‚Üí Access Granted
    if (role === "admin") {
      return {
        error: false,
        access: true,
        role: "admin",
        info: decoded,
      };
    }

    // ‚úÖ ‡¶Ø‡¶¶‡¶ø ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã user ‡¶π‡ßü (role ‡¶•‡¶æ‡¶ï ‡¶¨‡¶æ ‡¶®‡¶æ‡¶á, ‡¶ü‡ßã‡¶ï‡ßá‡¶® valid ‡¶π‡¶≤‡ßá‡¶á)
    return {
      error: false,
      access: true,
      role: role || "user",
      info: decoded,
    };

  } catch (error) {
    return {
      error: true,
      access: false,
      response: NextResponse.json(
        { message: "‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡ßü ‡¶¨‡¶æ ‡¶Æ‡ßá‡ßü‡¶æ‡¶¶ ‡¶∂‡ßá‡¶∑!" },
        { status: 403 }
      ),
    };
  }
};
