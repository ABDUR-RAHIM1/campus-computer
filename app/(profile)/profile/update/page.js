"use client";

import React, { useContext, useEffect, useLayoutEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import InputField from "@/utilities/InputField";
import { studentAuthFormState } from "@/formStats/StudentAuthState";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { getMyProfileInfo } from "@/handlers/studentProfile";
import { PostAction } from "@/actions/students/PostAction";
import { studentProfileUpdateDelete } from "@/constans";
import { globalContext } from "@/contextApi/ContextApi";
import SelectField from "@/utilities/SelectFiled";
import { getDepartmentsByProgram } from "@/LocalDatabase/departments";
import { getStatusColor } from "@/utilities/getStatusColor";



export default function EditProfile() {
    const { showToast, imgUrl, uploadResponse, uploader } = useContext(globalContext);
    const [loading, setLoading] = useState(false)
    const [submiting, setSubmiting] = useState(false)
    const [formData, setFormData] = useState(studentAuthFormState)
    const [departments, setDepartments] = useState([]);

    const { status, message } = uploadResponse;


    //  get login student profile info's
    useLayoutEffect(() => {
        const getProfile = async () => {
            try {
                setLoading(true);
                const { status, data } = await getMyProfileInfo();
                if (status === 200) {
                    setFormData((prev) => ({
                        ...prev,
                        ...data,
                    }));
                }
            } catch (error) {
                console.error("Profile fetch error:", error);
            } finally {
                setLoading(false);
            }
        };

        getProfile(); // ржПржЦрж╛ржирзЗ await рж▓рж╛ржЧржмрзЗ ржирж╛ ржХрж╛рж░ржг useEffect async ржХрж░рж╛ ржпрж╛ржмрзЗ ржирж╛
    }, []);



    const handleChange = (e) => {
        const { type, name, value, files } = e.target;

        if (type === "file") {
            const file = files[0]
            uploader(file)
        } else {
            setFormData((prev) => ({ ...prev, [name]: value }));
        }

    };

    // setImage Url In the form State
    useEffect(() => {
        setFormData((prev) => ({
            ...prev,
            profilePicture: imgUrl
        }))
    }, [imgUrl])




    // deparment filter using Program
    // ekhane formData.program er name ar departments.json er program nam same thakte hobe , tobei ata kaj korbe.
    useEffect(() => {
        if (formData.program) {
            const filterdDeparment = getDepartmentsByProgram(formData.program);
            setDepartments(filterdDeparment);
        }
    }, [formData.program])





    // ЁЯУМ ржПржЯрж╛ржХрзЗ component ржПрж░ ржЙржкрж░рзЗ ржмрж╛ ржлрж╛ржЗрж▓рзЗрж░ ржЙржкрж░рзЗ рж░рж╛ржЦрзЛ
    const parseCommaInputToArray = (value) => {
        return value
            .split(",")
            .map((item) => item.trim())
            .filter((item) => item !== "");
    };


    const handleSubmit = async (e) => {
        e.preventDefault();
        setSubmiting(true)
        try {
            const { password, ...updateData } = formData;


            const payload = {
                method: "PUT",
                endpoint: studentProfileUpdateDelete + formData._id,
                body: updateData
            }
            const { status, data } = await PostAction(payload)

            showToast(status, data)

        } catch (error) {
            console.log(error)
        } finally {
            setSubmiting(false)
        }

    };

    return (
        <div className="max-w-3xl mx-auto p-6 bg-white rounded-lg shadow my-20 border">
            <h2 className="text-2xl font-bold mb-6 text-center text-gray-800">ЁЯУЭ ржкрзНрж░рзЛржлрж╛ржЗрж▓ ржЖржкржбрзЗржЯ ржХрж░рзБржи</h2>
            <p className="text-sm text-gray-600 my-5 border-b">
                ржЖржкржирж┐ ржпрзЗ рждржерзНржпржЧрзБрж▓рзЛ ржкрзВрж░ржг ржХрж░ржмрзЗржи, рждрж╛рж░ ржЙржкрж░ ржнрж┐рждрзНрждрж┐ ржХрж░рзЗ ржЖржкржирж┐ ржХрзЗржмрж▓ржорж╛рждрзНрж░ ржЖржкржирж╛рж░ рж╢рзНрж░рзЗржгрж┐ ржУ ржмрж┐ржнрж╛ржЧрзЗрж░ ржЬржирзНржп ржкрзНрж░ржпрзЛржЬрзНржп рж╕рзЗржмрж╛ ржУ ржлрж░ржоржЧрзБрж▓рзЛ ржжрзЗржЦрждрзЗ ржкрж╛рж░ржмрзЗржиред
                ржпрзЗржоржи: ржЕржирж╛рж░рзНрж╕ ржмрж╛ ржбрж┐ржЧрзНрж░рзА ржкрзНрж░рзЛржЧрзНрж░рж╛ржорзЗрж░ ржлрж░ржо ржлрж┐рж▓ржЖржк, ржкрзЗржорзЗржирзНржЯ ржПржмржВ ржлрж▓рж╛ржлрж▓ рж╕ржВржХрзНрж░рж╛ржирзНржд рж╕рзЗржмрж╛ ржЗрждрзНржпрж╛ржжрж┐ред
                рж╕ржарж┐ржХ ржУ рж╕ржорзНржкрзВрж░рзНржг рждржерзНржп ржкрзНрж░ржжрж╛ржи ржХрж░рж▓рзЗ ржЖржкржирж╛рж░ ржХрж╛ржЬржЧрзБрж▓рзЛ ржЖрж░рзЛ ржжрзНрж░рзБржд ржУ ржирж┐рж░рзНржнрзБрж▓ржнрж╛ржмрзЗ рж╕ржорзНржкржирзНржи ржХрж░рж╛ рж╕ржорзНржнржм рж╣ржмрзЗред
            </p>


            {loading ? (
                <div className="text-center text-blue-600 font-semibold my-6">рж▓рзЛржб рж╣ржЪрзНржЫрзЗ, ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи...</div>
            ) : (
                <form onSubmit={handleSubmit} className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <InputField label="ЁЯСд ржирж╛ржо" name="username" value={formData.username} onChange={handleChange} required />
                    <InputField label="ЁЯУЮ ржорзЛржмрж╛ржЗрж▓" name="phone" value={formData.phone} onChange={handleChange} required />
                    <InputField label="ЁЯУз ржЗржорзЗржЗрж▓" name="email" value={formData.email} onChange={handleChange} />

                    <InputField label="ЁЯПЫя╕П ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯрзЗрж░ ржирж╛ржо" name="instituteName" value={formData.instituteName} required onChange={handleChange} />

                    {/* <InputField label="ЁЯПЫя╕П ржкрзНрж░рзЛржЧрзНрж░рж╛ржо (ржЕржирж╛рж░рзНрж╕/ржбрж┐ржЧрзНрж░рж┐/ржЗржирзНржЯрж╛рж░ржорзЗржбрж┐рзЯрзЗржЯ)" name="program" value={formData.program} required onChange={handleChange} /> */}

                    <SelectField
                        label="ЁЯПЫя╕П ржкрзНрж░рзЛржЧрзНрж░рж╛ржо (ржЕржирж╛рж░рзНрж╕/ржбрж┐ржЧрзНрж░рж┐/ржЗржирзНржЯрж╛рж░ржорзЗржбрж┐рзЯрзЗржЯ)"
                        name="program"
                        value={formData.program}
                        onChange={handleChange}
                        required
                        options={[
                            { label: "ржЕржирж╛рж░рзНрж╕", value: "honors" },
                            { label: "ржбрж┐ржЧрзНрж░рж┐", value: "degree" },
                            { label: "ржЗржирзНржЯрж╛рж░ржорзЗржбрж┐рзЯрзЗржЯ", value: "intermediate" },
                        ]}
                    />

                    <SelectField
                        label="ЁЯУЪ ржмрж┐ржнрж╛ржЧ"
                        name="department"
                        value={formData.department}
                        onChange={handleChange}
                        required
                        options={departments}
                    />

                    <SelectField
                        label="ЁЯПЫя╕П ржмрж░рзНрж╖"
                        name="classYear"
                        value={formData.classYear}
                        onChange={handleChange}
                        required
                        options={[
                            { label: " ржкрзНрж░ржержо ржмрж░рзНрж╖ ", value: "1" },
                            { label: " ржжрзНржмрж┐рждрзАрзЯ ржмрж░рзНрж╖", value: "2" },
                            { label: " рждрзГрждрзАрзЯ ржмрж░рзНрж╖", value: "3" },
                            { label: " ржЪрждрзБрж░рзНрже ржмрж░рзНрж╖", value: "4" },
                        ]}
                    />
                    <InputField label="ЁЯУЕ рж╕рзЗрж╢ржи" name="session" value={formData.session} onChange={handleChange} />
                    <InputField label="ЁЯОЯя╕П ржХрзНрж▓рж╛рж╕ рж░рзЛрж▓" name="classRoll" value={formData.classRoll} onChange={handleChange} />

                    <InputField label="ЁЯОУ рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи ржиржорзНржмрж░" name="registrationNumber" value={formData.registrationNumber} onChange={handleChange} required />
                    <InputField label="ЁЯЖФ ржмрзЛрж░рзНржб рж░рзЛрж▓" name="boardRoll" value={formData.boardRoll} onChange={handleChange} required />
                    <InputField label="ЁЯФР ржкрж┐ржи" name="pin" value={formData.pin} onChange={handleChange} />

                    {/* <InputField label="ЁЯСитАНЁЯСйтАНЁЯСз ржЕржнрж┐ржнрж╛ржмржХрзЗрж░ ржирж╛ржо" name="guardianName" value={formData.guardianName} onChange={handleChange} /> */}
                    <InputField label="ЁЯУ▒ ржЕржнрж┐ржнрж╛ржмржХрзЗрж░ ржорзЛржмрж╛ржЗрж▓" name="guardianPhone" value={formData.guardianPhone} onChange={handleChange} />
                    <InputField label="ЁЯПа ржарж┐ржХрж╛ржирж╛" name="address" value={formData.address} onChange={handleChange} />
                    <InputField label="ЁЯОВ ржЬржирзНржо рждрж╛рж░рж┐ржЦ" name="birthDate" value={formData.birthDate} type="date" onChange={handleChange} />



                    <SelectField
                        label="тЪзя╕П рж▓рж┐ржЩрзНржЧ"
                        name="gender"
                        value={formData.gender}
                        onChange={handleChange}
                        required
                        options={[
                            { label: "ржкрзБрж░рзБрж╖", value: "ржкрзБрж░рзБрж╖" },
                            { label: "ржорж╣рж┐рж▓рж╛", value: "ржорж╣рж┐рж▓рж╛" },
                            { label: "ржЕржирзНржпрж╛ржирзНржп", value: "ржЕржирзНржпрж╛ржирзНржп" },
                        ]}
                    />
                    <InputField label="ЁЯй╕ рж░ржХрзНржд ржЧрзНрж░рзБржк" name="bloodGroup" value={formData.bloodGroup} onChange={handleChange} placeholder="A+ / O+ etc." />



                    {/* ЁЯФШ ржорж╛ржирзЛржирзНржирзЯржи рж╕рзЗржХрж╢ржи */}
                    <div className="sm:col-span-2">
                        <label className="inline-flex items-center mb-2">
                            <input
                                type="checkbox"
                                name="hasImprovement"
                                checked={formData.hasImprovement || false}
                                onChange={(e) =>
                                    setFormData({
                                        ...formData,
                                        hasImprovement: e.target.checked,
                                    })
                                }
                                className="mr-2"
                            />
                            <span className="text-gray-800 font-medium">
                                ЁЯУЭ ржЖржкржирж┐ ржХрж┐ ржорж╛ржирзЛржирзНржирзЯржи ржкрж░рзАржХрзНрж╖рж╛рзЯ ржЕржВрж╢ ржирж┐рждрзЗ ржЪрж╛ржи?
                            </span>
                        </label>

                        {/* ржпржжрж┐ checkbox ржП ржЯрж┐ржХ ржжрзЗрзЯрж╛ рж╣рзЯ, рждрж╛рж╣рж▓рзЗ ржПржЗ ржЕржВрж╢ ржжрзЗржЦрж╛ржмрзЗ */}
                        {formData.hasImprovement && (
                            <div className="my-4">
                                <label htmlFor="improvementSubjects" className="font-medium text-gray-700">
                                    тЬНя╕П ржпрзЗрж╕ржм ржмрж┐рж╖рзЯрзЗрж░ ржХрзЛржбрзЗ ржкрзБржиржГржкрж░рзАржХрзНрж╖рж╛ ржжрж┐рждрзЗ ржЪрж╛ржЪрзНржЫрзЗржи (ржХржорж╛ ржжрж┐рзЯрзЗ рж▓рж┐ржЦрзБржи):
                                </label>
                                <input
                                    type="text"
                                    name="improvementSubjects"
                                    id="improvementSubjects"
                                    placeholder="ржпрзЗржоржи: 101, 202, 303"
                                    value={Array.isArray(formData.improvementSubjects) ? formData.improvementSubjects.join(", ") : ""}
                                    onChange={(e) =>
                                        setFormData({
                                            ...formData,
                                            improvementSubjects: parseCommaInputToArray(e.target.value),
                                        })
                                    }
                                    className="w-full mt-1 border border-gray-300 rounded p-2"
                                />
                                <p className="text-xs text-gray-500 mt-1">
                                    ржкрзНрж░рждрж┐ржЯрж┐ рж╕рж╛ржмржЬрзЗржХрзНржЯ ржХрзЛржб ржХржорж╛ (,) ржжрж┐рзЯрзЗ ржЖрж▓рж╛ржжрж╛ ржХрж░рзБржиред
                                </p>
                            </div>
                        )}
                    </div>






                    {/* тЬЕ Passport Size Photo Upload */}
                    <div className="col-span-full mb-4">
                        <Label htmlFor="profilePicture" className="font-medium mb-1 block">
                            ЁЯУ╕ ржкрж╛рж╕ржкрзЛрж░рзНржЯ рж╕рж╛ржЗржЬ ржЫржмрж┐ <span className="text-red-500">*</span>
                        </Label>
                        <p className="text-sm text-gray-500 mb-2">
                            ржПржЗ ржЫржмрж┐ржЯрж┐ ржХрж▓рзЗржЬрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржмрзЗред рждрж╛ржЗ рж╕рзНржкрж╖рзНржЯ, ржкрж░рж┐рж╖рзНржХрж╛рж░ ржПржмржВ ржкрж╛рж╕ржкрзЛрж░рзНржЯ рж╕рж╛ржЗржЬ ржЫржмрж┐ ржЖржкрж▓рзЛржб ржХрж░рзБржиред ржЖржорж░рж╛ ржПржЯрж┐ ржПржбрж┐ржЯ ржХрж░рзЗ ржкрзНрж░рж┐ржирзНржЯржпрзЛржЧрзНржп ржлрж░ржорзНржпрж╛ржЯрзЗ рждрзИрж░рж┐ ржХрж░ржмред
                        </p>
                        <Input
                            type="file"
                            name="profilePicture"
                            id="profilePicture"
                            accept="image/*"
                            // required
                            onChange={handleChange}
                        />
                        <p className={getStatusColor(status)}>
                            {
                                message
                            }
                        </p>
                    </div>
                    <div className="col-span-full mt-4">
                        <Button disabled={status === 102} type="submit" className="w-full">
                            {
                                submiting ? "ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ..." :
                                    "тЬЕ ржкрзНрж░рзЛржлрж╛ржЗрж▓ ржЖржкржбрзЗржЯ ржХрж░рзБржи"
                            }
                        </Button>
                    </div>
                </form>
            )
            }


        </div>
    );
}
