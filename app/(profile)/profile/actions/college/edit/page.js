"use client";

import React, { useContext, useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import InputField from "@/utilities/InputField";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { PostAction } from "@/actions/students/PostAction";
import { globalContext } from "@/contextApi/ContextApi";
import { getStatusColor } from "@/utilities/getStatusColor";
import { studentProfileCreate, studentProfileUpdateDelete } from "@/constans";
import { studentProfileFormState } from "@/formStats/StudentProfileState";
import { Checkbox } from "@/components/ui/checkbox";
import { sessionList } from "@/LocalDatabase/seasion";


import { formatDateToInput } from "@/utilities/formatDateToInput";
import Spinner from "@/utilities/Spinner";

export default function EditProfile() {
    const {
        showToast,
        imgUrl,
        uploadResponse,
        uploader,
        editData,
        studentInfo,
    } = useContext(globalContext);

    const [submitting, setSubmitting] = useState(false);
    const { status, message } = uploadResponse;
    const isEditable = editData && Object.keys(editData)?.length > 0;

    const [formData, setFormData] = useState({
        ...studentProfileFormState,
        studentName: "",
    });

    useEffect(() => {
        if (!studentProfileFormState.isOtherStudent && studentInfo?.username) {
            setFormData((prev) => ({
                ...prev,
                studentName: studentInfo.username,
            }));
        }
    }, [studentInfo, studentProfileFormState.isOtherStudent]);

    useEffect(() => {
        if (isEditable && editData) {
            setFormData((prev) => ({
                ...prev,
                ...editData,
                birthDate: formatDateToInput(editData.birthDate), // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶ï‡¶∞‡ßá ‡¶¨‡¶∏‡¶æ‡¶ì
            }));
        }
    }, [editData]);

    const handleChange = (e) => {
        const { type, name, value, files } = e.target;

        if (type === "file") {
            uploader(files);
        } else {
            setFormData((prev) => ({
                ...prev,
                [name]: value,
                ...(name === "improvementSubjects" && {
                    improvementSubjects: value
                        .split(",")
                        .map((subject) => subject.trim())
                    // .filter((subject) => subject !== ""),
                }),
            }));
        }
    };


    useEffect(() => {
        setFormData((prev) => ({
            ...prev,
            profilePicture: imgUrl[0],
        }));
    }, [imgUrl]);



    const handleSubmit = async (e) => {
        e.preventDefault();
        setSubmitting(true);
        try {

            const payload = {
                method: "PUT",
                endpoint: studentProfileUpdateDelete + formData?._id,
                body: formData,
            };
            const { status, data } = await PostAction(payload);
            showToast(status, data);
        } catch (error) {
            console.log(error);
        } finally {
            setSubmitting(false);
        }
    };

    return (
        <div className="max-w-3xl mx-auto p-6 bg-white rounded-lg shadow my-20 border">
            <h2 className="text-2xl font-bold mb-6 text-center text-gray-800">
                üìù ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
            </h2>

            <div className="my-8">
                <Label className="hover:bg-accent/50 flex items-start gap-3 rounded-lg border p-3 has-[[aria-checked=true]]:border-blue-600 has-[[aria-checked=true]]:bg-blue-50">
                    <Checkbox
                        onCheckedChange={(checked) =>
                            setFormData((prev) => ({
                                ...prev,
                                isOtherStudent: !!checked,
                            }))
                        }
                        checked={formData.isOtherStudent}
                        id="toggle-2"
                    />
                    <div className="grid gap-1.5 font-normal">
                        <p className="text-sm leading-none font-medium">
                            ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶¨‡¶æ‡¶®‡¶æ‡¶¨‡ßá‡¶® ?
                        </p>
                        <p className="text-muted-foreground text-sm">
                            ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶π‡ßü ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶ü‡¶ø‡¶ï ‡¶¶‡ßá‡¶ì‡ßü‡¶æ‡¶∞ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶®‡ßá‡¶á‡•§
                        </p>
                    </div>
                </Label>
            </div>

            <form
                onSubmit={handleSubmit}
                className="grid grid-cols-1 sm:grid-cols-2 gap-4"
            >
                <InputField
                    label={
                        formData.isOtherStudent
                            ? "üìß‡¶Ö‡¶®‡ßç‡¶Ø ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ‡¶∞ ‡¶®‡¶æ‡¶Æ"
                            : "üìß‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ"
                    }
                    name="studentName"
                    value={formData.studentName}
                    onChange={handleChange}
                    disabled={!formData.isOtherStudent}
                />

                <InputField
                    label="üìß ‡¶á‡¶Æ‡ßá‡¶á‡¶≤"
                    name="email"
                    value={formData.email}
                    onChange={handleChange}
                />

                <InputField
                    label="üèõÔ∏è ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ"
                    name="instituteName"
                    value={formData.instituteName}
                    required
                    onChange={handleChange}
                />

                {/* Program */}
                <div className="space-y-1">
                    <Label>üèõÔ∏è ‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ</Label>

                    <select
                        value={formData.program}
                        onChange={handleChange}
                        name="program"
                        id="program"
                        className=" w-full py-[5px] px-3 rounded-sm border outline-0 focus:shadow-md"
                    >
                        <option value="honors">‡¶Ö‡¶®‡¶æ‡¶∞‡ßç‡¶∏</option>
                        <option value="degree">‡¶°‡¶ø‡¶ó‡ßç‡¶∞‡¶ø</option>
                        <option value="intermediate">‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶Æ‡ßá‡¶°‡¶ø‡ßü‡ßá‡¶ü</option>
                    </select>
                </div>

                {/* Class Year */}
                <div className="space-y-1">
                    <Label>üèõÔ∏è ‡¶¨‡¶∞‡ßç‡¶∑</Label>
                    <select
                        value={formData.classYear}
                        onChange={handleChange}
                        name="gender"
                        id="gender"
                        className=" w-full py-[5px] px-3 rounded-sm border outline-0 focus:shadow-md"
                    >
                        <option value="‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶¨‡¶∞‡ßç‡¶∑">‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶¨‡¶∞‡ßç‡¶∑</option>
                        <option value="‡¶¶‡ßç‡¶¨‡¶ø‡¶§‡ßÄ‡ßü ‡¶¨‡¶∞‡ßç‡¶∑">‡¶¶‡ßç‡¶¨‡¶ø‡¶§‡ßÄ‡ßü ‡¶¨‡¶∞‡ßç‡¶∑</option>
                        <option value="‡¶§‡ßÉ‡¶§‡ßÄ‡ßü ‡¶¨‡¶∞‡ßç‡¶∑">‡¶§‡ßÉ‡¶§‡ßÄ‡ßü ‡¶¨‡¶∞‡ßç‡¶∑</option>
                        <option value="‡¶ö‡¶§‡ßÅ‡¶∞‡ßç‡¶• ‡¶¨‡¶∞‡ßç‡¶∑">‡¶ö‡¶§‡ßÅ‡¶∞‡ßç‡¶• ‡¶¨‡¶∞‡ßç‡¶∑</option>
                    </select>
                </div>

                {/* Session */}
                <div className="space-y-1">
                    <Label>üìö ‡¶∏‡ßá‡¶∂‡¶®</Label>

                    <select
                        value={formData.session}
                        onChange={handleChange}
                        name="session"
                        id="session"
                        className=" w-full py-[5px] px-3 rounded-sm border outline-0 focus:shadow-md"
                    >
                        {sessionList.map((session) => (
                            <option key={session} value={session}>
                                {session}
                            </option>
                        ))}
                    </select>
                </div>

                <InputField
                    label="üéüÔ∏è ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶∞‡ßã‡¶≤"
                    name="classRoll"
                    value={formData.classRoll}
                    onChange={handleChange}
                />
                <InputField
                    label="üéì ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞"
                    name="registrationNumber"
                    value={formData.registrationNumber}
                    onChange={handleChange}
                    required
                />
                <InputField
                    label="üÜî ‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶∞‡ßã‡¶≤"
                    name="boardRoll"
                    value={formData.boardRoll}
                    onChange={handleChange}
                    required
                />
                <InputField
                    label="üîê ‡¶™‡¶ø‡¶®"
                    name="pin"
                    value={formData.pin}
                    onChange={handleChange}
                />
                <InputField
                    label="üì± ‡¶Ö‡¶≠‡¶ø‡¶≠‡¶æ‡¶¨‡¶ï‡ßá‡¶∞ ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤"
                    name="guardianPhone"
                    value={formData.guardianPhone}
                    onChange={handleChange}
                />
                <InputField
                    label="üè† ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ"
                    name="address"
                    value={formData.address}
                    onChange={handleChange}
                />
                <InputField
                    label="üéÇ ‡¶ú‡¶®‡ßç‡¶Æ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ"
                    name="birthDate"
                    type="date"
                    value={formData.birthDate}
                    onChange={handleChange}
                />

                {/* Gender */}
                <div className="space-y-1">
                    <Label>‚ößÔ∏è ‡¶≤‡¶ø‡¶ô‡ßç‡¶ó</Label>
                    <select
                        value={formData.gender}
                        onChange={handleChange}
                        name="gender"
                        id="gender"
                        className=" w-full py-[5px] px-3 rounded-sm border outline-0 focus:shadow-md"
                    >
                        <option value="‡¶™‡ßÅ‡¶∞‡ßÅ‡¶∑">‡¶™‡ßÅ‡¶∞‡ßÅ‡¶∑</option>
                        <option value="‡¶Æ‡¶π‡¶ø‡¶≤‡¶æ">‡¶Æ‡¶π‡¶ø‡¶≤‡¶æ</option>
                        <option value="‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø">‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø</option>
                    </select>
                </div>

                <InputField
                    label="ü©∏ ‡¶∞‡¶ï‡ßç‡¶§ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™"
                    name="bloodGroup"
                    value={formData.bloodGroup}
                    onChange={handleChange}
                    placeholder="A+ / O+ etc."
                />

                {/* ‡¶Æ‡¶æ‡¶®‡ßã‡¶®‡ßç‡¶®‡ßü‡¶® */}
                <div className="sm:col-span-2">
                    <label className="inline-flex items-center mb-2">
                        <input
                            type="checkbox"
                            name="hasImprovement"
                            checked={formData.hasImprovement || false}
                            onChange={(e) =>
                                setFormData({
                                    ...formData,
                                    hasImprovement: e.target.checked,
                                })
                            }
                            className="mr-2"
                        />
                        <span className="text-gray-800 font-medium">
                            üìù ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶Æ‡¶æ‡¶®‡ßã‡¶®‡ßç‡¶®‡ßü‡¶® ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡ßü ‡¶Ö‡¶Ç‡¶∂ ‡¶®‡¶ø‡¶§‡ßá ‡¶ö‡¶æ‡¶®?
                        </span>
                    </label>

                    {formData.hasImprovement && (
                        <div className="my-4">
                            <label
                                htmlFor="improvementSubjects"
                                className="font-medium text-gray-700"
                            >
                                ‚úçÔ∏è ‡¶Ø‡ßá‡¶∏‡¶¨ ‡¶¨‡¶ø‡¶∑‡ßü‡ßá‡¶∞ ‡¶ï‡ßã‡¶°‡ßá ‡¶™‡ßÅ‡¶®‡¶É‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶¶‡¶ø‡¶§‡ßá ‡¶ö‡¶æ‡¶ö‡ßç‡¶õ‡ßá‡¶® (‡¶ï‡¶Æ‡¶æ ‡¶¶‡¶ø‡ßü‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®):
                            </label>
                            <input
                                type="text"
                                name="improvementSubjects"
                                id="improvementSubjects"
                                placeholder="‡¶Ø‡ßá‡¶Æ‡¶®: 101, 202, 303"
                                value={formData.improvementSubjects}
                                onChange={handleChange}
                                className="w-full mt-1 border border-gray-300 rounded p-2"
                            />
                            <p className="text-xs text-gray-500 mt-1">
                                ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∏‡¶æ‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡ßã‡¶° ‡¶ï‡¶Æ‡¶æ (,) ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
                            </p>
                        </div>
                    )}
                </div>

                {/* Profile Photo Upload */}
                <div className="col-span-full mb-4">
                    <Label
                        htmlFor="profilePicture"
                        className="font-medium mb-1 block"
                    >
                        üì∏ ‡¶™‡¶æ‡¶∏‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶∏‡¶æ‡¶á‡¶ú ‡¶õ‡¶¨‡¶ø <span className="text-red-500">*</span>
                    </Label>
                    <p className="text-sm text-gray-500 mb-2">
                        ‡¶è‡¶á ‡¶õ‡¶¨‡¶ø‡¶ü‡¶ø ‡¶ï‡¶≤‡ßá‡¶ú‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá‡•§ ‡¶§‡¶æ‡¶á ‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü, ‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶è‡¶¨‡¶Ç
                        ‡¶™‡¶æ‡¶∏‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶∏‡¶æ‡¶á‡¶ú ‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
                    </p>
                    <Input
                        type="file"
                        name="profilePicture"
                        id="profilePicture"
                        accept="image/*"
                        onChange={handleChange}
                    />
                    <p className={getStatusColor(status)}>{message}</p>
                </div>

                <div className="col-span-full mt-4">
                    <Button disabled={status === 102 || submitting} type="submit" className="w-full">
                        {submitting ? <Spinner /> : `‚úÖ ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®`}
                    </Button>
                </div>
            </form>
        </div>
    );
}
