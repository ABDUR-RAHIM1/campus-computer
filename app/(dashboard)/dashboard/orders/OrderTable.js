"use client";
import React, { useContext, useEffect, useState } from "react";
import Link from "next/link";
import DataTable from "react-data-table-component";
import { format } from "date-fns";
import { PostActionAdmin } from "@/actions/admins/PostAction";
import { orderStatusUpdate } from "@/constans";
import { globalContext } from "@/contextApi/ContextApi";
import OrderOverViewCard from "@/components/overviewCards/OrderOverViewCard";

export default function OrderTable({ orders }) {
  const { showToast } = useContext(globalContext);
  const [orderList, setOrderList] = useState([]);


  useEffect(() => {
    if (orders) {
      setOrderList(orders);
    }
  }, [orders]);


  const activeOrderCount = orderList?.filter(orderItem => orderItem.status === "active")?.length || 0
  const successOrderCount = orderList?.filter(orderItem => orderItem.status === "success")?.length || 0
  const cancelOrderCount = orderList?.filter(orderItem => orderItem.status === "cancel")?.length || 0




  //  order stutus update handler
  const handleStatusChange = async (orderId, newStatus) => {
    try {
      const payload = {
        method: "PUT",
        endpoint: orderStatusUpdate + orderId,
        body: { orderStatus: newStatus },
      };
      const { status, data } = await PostActionAdmin(payload);
      showToast(status, data)

      if (status === 200) {
        // ‚úÖ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶Ü‡¶™‡¶°‡ßá‡¶ü (‡¶≤‡ßã‡¶ï‡¶æ‡¶≤‡¶ø UI ‡¶§‡ßá ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®)
        setOrderList((prev) =>
          prev.map((order) =>
            order._id === orderId ? { ...order, status: newStatus } : order
          )
        );
      }
    } catch (error) {
      console.log("üõë Failed to update order status", error);
    }
  };




  const columns = [
    {
      name: "‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ",
      selector: (row) => (
        <div>
          <p className="my-2">{row.reference?.username || "N/A"}</p>
        </div>
      ),
      sortable: true,
      width: "150px",
      wrap: true,
    },
    {
      name: "‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤",
      selector: (row) => (
        <p className="my-2">{row.profileId?.studentName || "N/A"}</p>
      ),
      sortable: true,
      width: "200px",
      wrap: true,
    },
    {
      name: "‡¶∏‡ßá‡¶¨‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ",
      selector: (row) => (
        <p className="my-2">{row.serviceId?.title || "N/A"}</p>
      ),
      sortable: true,
      width: "250px",
      wrap: true,
    },
    {
      name: "‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó ",
      selector: (row) => (
        <p className="my-2">{row.department || "N/A"}</p>
      ),
      sortable: true,
      width: "150px",
      wrap: true,
    },
    {
      name: "‡¶¶‡¶æ‡¶Æ ",
      selector: (row) => (
        <p className="my-2">{row.collegeFee || "N/A"}</p>
      ),
      sortable: true,
      width: "100px",
      wrap: true,
    },
    {
      name: "‡¶ö‡¶æ‡¶∞‡ßç‡¶ú",
      selector: (row) => (
        <p className="my-2">{row.chargeFee || "N/A"}</p>
      ),
      sortable: true,
      width: "100px",
      wrap: true,
    },
    {
      name: "‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ",
      selector: (row) =>
        format(new Date(row.createdAt), "dd/MM/yyyy") || "N/A",
    },
    {
      name: "‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏",
      selector: (row) => row.status,
      cell: (row) => {
        let bgClass = "";
        let textClass = "";
        let statusText = "";

        if (row.status === "cancel") {
          bgClass = "bg-red-100";
          textClass = "text-red-800";
          statusText = "‡¶¨‡¶æ‡¶§‡¶ø‡¶≤";
        } else if (row.status === "active") {
          bgClass = "bg-blue-100";
          textClass = "text-blue-800";
          statusText = "‡¶ö‡¶≤‡¶Æ‡¶æ‡¶®";
        } else if (row.status === "success") {
          bgClass = "bg-green-100";
          textClass = "text-green-800";
          statusText = "‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®";
        }

        return (
          <select
            value={row.status}
            onChange={(e) => handleStatusChange(row._id, e.target.value)}
            className={`text-xs px-2 py-1 rounded border font-medium ${bgClass} ${textClass}`}
          >
            <option value="cancel">‡¶¨‡¶æ‡¶§‡¶ø‡¶≤</option>
            <option value="active">‡¶ö‡¶≤‡¶Æ‡¶æ‡¶®</option>
            <option value="success">‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®</option>
          </select>
        );
      },
    },
    {
      name: "‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü",
      selector: (row) => row.paymentStatus,
      cell: (row) => (
        <span
          className={`px-2 py-1 rounded text-xs font-medium text-white ${row.paymentStatus === "paid"
            ? "bg-green-600"
            : row.paymentStatus === "pending"
              ? "bg-yellow-600"
              : "bg-red-600"
            }`}
        >
          {row.paymentStatus === "paid"
            ? "Success"
            : row.paymentStatus === "pending"
              ? "Pending"
              : "Failed"}
        </span>
      ),
    },
    {
      name: "‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§",
      selector: (row) => (
        <Link
          href={`/dashboard/orders/${row._id}`}
          className={
            " inline-block py-2 px-3 rounded-md bg-green-600 text-white cursor-pointer text-sm"
          }
        >
          ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßã
        </Link>
      ),
      width: "120px",
    },
  ];


  const ExpandableComponent = ({ data }) => {
    return (
      <>
        {data.status === "cancel" && (
          <div className="p-4 text-sm bg-red-100 rounded">
            <p>
              <span className="font-semibold">üì± ‡¶´‡ßá‡¶∞‡¶§‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞:</span>{" "}
              {data?.cancelOrderInfo?.recivedNumber || "N/A"}
            </p>
            <p className="mt-1">
              <span className="font-semibold">üìù ‡¶ï‡¶æ‡¶∞‡¶£:</span>{" "}
              {data?.cancelOrderInfo?.reason || "N/A"}
            </p>
          </div>
        )}

        {data.status === "active" && (
          <div className="my-3 bg-blue-100 p-3 rounded">
            <h2>üöö ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡¶ü‡¶ø ‡¶ö‡¶≤‡¶Æ‡¶æ‡¶® ‡¶∞‡¶Ø‡¶º‡ßá‡¶õ‡ßá</h2>
            <p> ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ß‡ßÄ‡¶® ‡¶∞‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§</p>
          </div>
        )}

        {data.status === "success" && (
          <div className="my-3 bg-green-100 p-3 rounded">
            <h2>‚úÖ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡¶ü‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá</h2>
            <p> ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡¶ü‡¶ø ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!</p>
          </div>
        )}
      </>
    );
  };




  return (
    <div className="min-h-screen bg-gray-100 py-10 px-4">
      <div className=" w-full mx-auto bg-white shadow-lg rounded-lg p-2 md:p-6">
        <h2 className=" text-xl md:text-2xl font-bold text-gray-800 mb-4">
          üìã ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡¶∏‡¶Æ‡ßÇ‡¶π
        </h2>
        <p className=" text-sm md:text-xl text-gray-700 mb-6">
          ‡¶®‡¶ø‡¶ö‡ßá ‡¶∏‡¶¨ ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡ßç‡¶∞‡¶Æ‡ßá‡¶∞ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶≤‡ßã‡•§ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶∏‡¶æ‡¶∞‡¶ø‡¶∞ ‡¶â‡¶™‡¶∞‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
        </p>

        <OrderOverViewCard
          total={orderList?.length || 0}
          active={activeOrderCount}
          success={successOrderCount}
          cancel={cancelOrderCount}
        />

        <DataTable
          columns={columns}
          data={orderList}
          pagination
          highlightOnHover
          responsive
          expandableRows
          expandableRowsComponent={ExpandableComponent}
          customStyles={{
            headCells: {
              style: {
                backgroundColor: "#f3f4f6",
                fontWeight: "bold",
              },
            },
          }}
        />
      </div>
    </div>
  );
}
