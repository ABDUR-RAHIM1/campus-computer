import { connectDb } from "@/database/connectDb";
import { NextResponse } from "next/server";
import bcrypt from "bcryptjs";
import AdminModel from "@/database/models/AdminAuth";

export const POST = async (req) => {
    try {
        await connectDb();

        const body = await req.json();
        const { username, phone, password } = body;

        if (!username || !phone || !password) {
            return NextResponse.json(
                { message: "‡¶∏‡¶¨ ‡¶´‡¶ø‡¶≤‡ßç‡¶° ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§" },
                { status: 400 }
            );
        }

        if (password.length < 6) {
            return NextResponse.json(
                { message: "‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ß¨ ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞‡ßá‡¶∞ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§" },
                { status: 400 }
            );
        }

        const isExist = await AdminModel.findOne({ phone });
        if (isExist) {
            return NextResponse.json(
                { message: "‡¶è‡¶á ‡¶´‡ßã‡¶® ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡¶ø‡ßü‡ßá ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶∞‡ßü‡ßá‡¶õ‡ßá‡•§" },
                { status: 409 }
            );
        }

        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(password, salt);

        const newUser = await AdminModel.create({
            username,
            phone,
            password: hashedPassword,
        });

        return NextResponse.json(
            {
                message: "‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶∏‡¶´‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá!"
            },
            { status: 201 }
        );
    } catch (error) {
        console.error("Registration Error:", error);

        // üëá Mongoose validation error check
        if (error.name === "ValidationError") {
            const errors = Object.values(error.errors).map((err) => err.message);
            return NextResponse.json(
                { message: errors[0] || "‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶°‡ßá‡¶∂‡¶® ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø‡•§" },
                { status: 400 }
            );
        }

        return NextResponse.json(
            { message: "‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§" },
            { status: 500 }
        );
    }
};
