import { connectDb } from "@/database/connectDb";
import ServiceModel from "@/database/models/Services";
import { adminAuthGuard } from "@/middlewere/adminAuthGuard";
import { NextResponse } from "next/server";


//  Creaet services for Admin
// api => /api/services/postGet
export const POST = async (req) => {
    try {


        // üîê Auth Guard: ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡ßá‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø
        const { error, admin, response } = await adminAuthGuard(req);
        if (error) return response;


        await connectDb();

        const body = await req.json();

        // Simple validation example, ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ö‡¶æ‡¶á‡¶≤‡ßá Joi ‡¶¨‡¶æ Zod ‡¶¶‡¶ø‡ßü‡ßá ‡¶ï‡¶∞‡ßã
        if (
            !body.title ||
            !body.program ||
            !body.classYear ||
            !body.departmentFees ||
            !Array.isArray(body.departmentFees) ||
            body.departmentFees.length === 0
        ) {
            return NextResponse.json(
                { message: "title, program, classYear ‡¶è‡¶¨‡¶Ç fee ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§" },
                { status: 400 }
            );
        }

        const newService = new ServiceModel({
            title: body.title,
            description: body.description || "",
            program: body.program,
            department: body.department || null,
            classYear: body.classYear,
            session: body.session || null,
            departmentFees: body.departmentFees || [],
            requiredDocuments: body.requiredDocuments || [],
            active: body.active !== undefined ? body.active : true,
            isRegular: body.isRegular !== undefined ? body.isRegular : true,
        });

        const savedService = await newService.save();

        return NextResponse.json(
            {
                message: "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§",
            },
            { status: 201 }
        );
    } catch (error) {
        console.error("POST Services Error:", error);
        return NextResponse.json({ message: "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§" }, { status: 500 });
    }
};




//  for Public and Admin
export const GET = async () => {
    try {
        await connectDb();

        const services = await ServiceModel.find({ active: true }).sort({ createdAt: -1 });

        return NextResponse.json(services, { status: 200 });
    } catch (error) {
        console.error("GET Services Error:", error);
        return NextResponse.json({ message: "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ü‡¶®‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§" }, { status: 500 });
    }
};

